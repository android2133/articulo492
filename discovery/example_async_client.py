#!/usr/bin/env python3
"""
Cliente de ejemplo para probar la ejecuci√≥n as√≠ncrona de workflows.
Este script demuestra c√≥mo:
1. Iniciar un workflow de forma as√≠ncrona
2. Hacer polling del estado
3. Conectarse al WebSocket para recibir notificaciones en tiempo real
"""

import asyncio
import json
import time
import httpx
import websockets
from datetime import datetime

# Configuraci√≥n
DISCOVERY_BASE_URL = "http://localhost:8080"
WORKFLOW_ID = "tu-workflow-id-aqui"  # Reemplazar con un ID real

async def start_async_workflow():
    """Inicia un workflow de forma as√≠ncrona y devuelve la informaci√≥n de seguimiento."""
    
    # Datos del documento de ejemplo
    payload = {
        "base64": "JVBERi0xLjQKJcOkw7zDtsOt...",  # Base64 del PDF (truncado para ejemplo)
        "mime": "application/pdf",
        "nombre_documento": "documento_ejemplo.pdf",
        "uuid_proceso": f"proceso_{int(time.time())}",
        "manual": False
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{DISCOVERY_BASE_URL}/workflows/{WORKFLOW_ID}/execute-async",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Workflow iniciado exitosamente!")
            print(f"üìã Execution ID: {result['execution_id']}")
            print(f"üîó Tracking URL: {DISCOVERY_BASE_URL}{result['tracking_url']}")
            print(f"üåê WebSocket URL: ws://localhost:8080{result['websocket_url']}")
            return result
        else:
            print(f"‚ùå Error iniciando workflow: {response.status_code}")
            print(response.text)
            return None

async def check_workflow_status(execution_id):
    """Verifica el estado actual del workflow."""
    
    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{DISCOVERY_BASE_URL}/executions/{execution_id}/status",
            timeout=10
        )
        
        if response.status_code == 200:
            status = response.json()
            print(f"\nüìä Estado del Workflow:")
            print(f"   ID: {status['execution_id']}")
            print(f"   Status: {status['status']}")
            print(f"   Progreso: {status['progress']['percentage']}%")
            print(f"   Steps completados: {status['progress']['completed_steps']}/{status['progress']['total_steps']}")
            
            if status['current_step']:
                print(f"   Step actual: {status['current_step']['name']}")
            
            print(f"   Ejecut√°ndose: {status['progress']['is_running']}")
            print(f"   Completado: {status['progress']['is_completed']}")
            print(f"   Fall√≥: {status['progress']['is_failed']}")
            
            return status
        else:
            print(f"‚ùå Error verificando estado: {response.status_code}")
            return None

async def listen_websocket(execution_id):
    """Escucha notificaciones en tiempo real via WebSocket."""
    
    ws_url = f"ws://localhost:8080/ws/{execution_id}"
    print(f"\nüîå Conectando a WebSocket: {ws_url}")
    
    try:
        async with websockets.connect(ws_url) as websocket:
            print("‚úÖ Conectado al WebSocket")
            print("üëÇ Escuchando notificaciones en tiempo real...\n")
            
            async for message in websocket:
                try:
                    data = json.loads(message)
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    
                    event = data.get("event", "unknown")
                    
                    if event == "workflow_started":
                        print(f"[{timestamp}] üöÄ Workflow iniciado")
                    
                    elif event == "step_started":
                        step_name = data.get("step", "Unknown")
                        print(f"[{timestamp}] ‚ñ∂Ô∏è  Step iniciado: {step_name}")
                    
                    elif event == "step_progress":
                        step_name = data.get("step_name", "Unknown")
                        progress = data.get("progress", {})
                        percentage = progress.get("percentage", 0)
                        message_text = progress.get("message", "")
                        print(f"[{timestamp}] üìà {step_name}: {percentage}% - {message_text}")
                    
                    elif event == "step_finished":
                        step_name = data.get("step", "Unknown")
                        print(f"[{timestamp}] ‚úÖ Step completado: {step_name}")
                    
                    elif event == "step_completed":
                        step_name = data.get("step_name", "Unknown")
                        result = data.get("result", {})
                        success = result.get("success", False)
                        print(f"[{timestamp}] ‚úÖ Step finalizado: {step_name} - {'√âxito' if success else 'Error'}")
                    
                    elif event == "workflow_completed":
                        print(f"[{timestamp}] üéâ Workflow COMPLETADO exitosamente!")
                        break
                    
                    elif event == "workflow_failed":
                        print(f"[{timestamp}] ‚ùå Workflow FALL√ì")
                        break
                    
                    elif event == "workflow_error":
                        error = data.get("error", "Unknown error")
                        print(f"[{timestamp}] üí• Error en workflow: {error}")
                        break
                    
                    else:
                        print(f"[{timestamp}] üì® Evento: {event}")
                        
                except json.JSONDecodeError:
                    print(f"[{timestamp}] ‚ö†Ô∏è  Mensaje no JSON: {message}")
                    
    except Exception as e:
        print(f"‚ùå Error en WebSocket: {e}")

async def polling_example(execution_id):
    """Ejemplo de seguimiento por polling."""
    
    print("\nüîÑ Iniciando seguimiento por polling...")
    
    while True:
        status = await check_workflow_status(execution_id)
        
        if not status:
            break
            
        if status['progress']['is_completed']:
            print(f"\nüéâ Workflow completado exitosamente!")
            print(f"üìù Contexto final disponible en: {DISCOVERY_BASE_URL}/executions/{execution_id}/status")
            break
            
        elif status['progress']['is_failed']:
            print(f"\n‚ùå Workflow fall√≥")
            break
            
        elif status['progress']['is_running']:
            print(f"‚è≥ Esperando... ({status['progress']['percentage']}%)")
            await asyncio.sleep(3)  # Esperar 3 segundos antes del siguiente check
        else:
            break

async def main():
    """Funci√≥n principal que demuestra ambas formas de seguimiento."""
    
    print("üöÄ Demo de Ejecuci√≥n As√≠ncrona de Workflows")
    print("=" * 50)
    
    # 1. Iniciar workflow
    result = await start_async_workflow()
    if not result:
        return
    
    execution_id = result['execution_id']
    
    # 2. Elegir m√©todo de seguimiento
    print(f"\nü§î ¬øC√≥mo quieres hacer el seguimiento?")
    print(f"1. WebSocket (tiempo real)")
    print(f"2. Polling (cada 3 segundos)")
    print(f"3. Solo ver estado actual")
    
    choice = input("Elige una opci√≥n (1/2/3): ").strip()
    
    if choice == "1":
        await listen_websocket(execution_id)
    elif choice == "2":
        await polling_example(execution_id)
    elif choice == "3":
        await check_workflow_status(execution_id)
    else:
        print("Opci√≥n no v√°lida")

async def test_legacy_async():
    """Prueba el endpoint legacy as√≠ncrono."""
    
    payload = {
        "workflow_id": WORKFLOW_ID,
        "mode": "automatic",
        "data": {
            "base64": "JVBERi0xLjQKJcOkw7zDtsOt...",
            "mime": "application/pdf",
            "nombre_documento": "documento_legacy.pdf",
            "uuid_proceso": f"proceso_legacy_{int(time.time())}",
            "manual": False
        }
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{DISCOVERY_BASE_URL}/execute-async/",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Workflow legacy iniciado exitosamente!")
            print(f"üìã Execution ID: {result['execution_id']}")
            return result['execution_id']
        else:
            print(f"‚ùå Error: {response.status_code}")
            print(response.text)
            return None

if __name__ == "__main__":
    # Descomentar para probar el endpoint legacy
    # asyncio.run(test_legacy_async())
    
    # Ejecutar demo principal
    asyncio.run(main())
